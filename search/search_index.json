{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkDocs Generator Python tool for generating files for MkDocs . Prerequisites Python 3.7 or later Getting Started Create required files for the documentation: README.md , LICENSE , docs . Usage Run the script python mkdocs-gen.py --name \"Your Project Name\" This will create a new directory, named mkdocs , which can be used by mkdocs script. License This project is licensed under the MIT License - see the LICENSE for details.","title":"Home"},{"location":"#mkdocs-generator","text":"Python tool for generating files for MkDocs .","title":"MkDocs Generator"},{"location":"#prerequisites","text":"Python 3.7 or later","title":"Prerequisites"},{"location":"#getting-started","text":"Create required files for the documentation: README.md , LICENSE , docs .","title":"Getting Started"},{"location":"#usage","text":"","title":"Usage"},{"location":"#run-the-script","text":"python mkdocs-gen.py --name \"Your Project Name\" This will create a new directory, named mkdocs , which can be used by mkdocs script.","title":"Run the script"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE for details.","title":"License"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2024 CGWare Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"coverage/","text":"GCC Code Coverage Report /* pygments syntax highlighting */ pre { line-height: 125%; } td.linenos .normal { color: #6e7681; background-color: #0d1117; padding-left: 5px; padding-right: 5px; } span.linenos { color: #6e7681; background-color: #0d1117; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #e6edf3; background-color: #6e7681; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #e6edf3; background-color: #6e7681; padding-left: 5px; padding-right: 5px; } .hll { background-color: #6e7681 } .c { color: #8b949e; font-style: italic } /* Comment */ .err { color: #f85149 } /* Error */ .esc { color: #e6edf3 } /* Escape */ .g { color: #e6edf3 } /* Generic */ .k { color: #ff7b72 } /* Keyword */ .l { color: #a5d6ff } /* Literal */ .n { color: #e6edf3 } /* Name */ .o { color: #ff7b72; font-weight: bold } /* Operator */ .x { color: #e6edf3 } /* Other */ .p { color: #e6edf3 } /* Punctuation */ .ch { color: #8b949e; font-style: italic } /* Comment.Hashbang */ .cm { color: #8b949e; font-style: italic } /* Comment.Multiline */ .cp { color: #8b949e; font-weight: bold; font-style: italic } /* Comment.Preproc */ .cpf { color: #8b949e; font-style: italic } /* Comment.PreprocFile */ .c1 { color: #8b949e; font-style: italic } /* Comment.Single */ .cs { color: #8b949e; font-weight: bold; font-style: italic } /* Comment.Special */ .gd { color: #ffa198; background-color: #490202 } /* Generic.Deleted */ .ge { color: #e6edf3; font-style: italic } /* Generic.Emph */ .ges { color: #e6edf3; font-weight: bold; font-style: italic } /* Generic.EmphStrong */ .gr { color: #ffa198 } /* Generic.Error */ .gh { color: #79c0ff; font-weight: bold } /* Generic.Heading */ .gi { color: #56d364; background-color: #0f5323 } /* Generic.Inserted */ .go { color: #8b949e } /* Generic.Output */ .gp { color: #8b949e } /* Generic.Prompt */ .gs { color: #e6edf3; font-weight: bold } /* Generic.Strong */ .gu { color: #79c0ff } /* Generic.Subheading */ .gt { color: #ff7b72 } /* Generic.Traceback */ .g-Underline { color: #e6edf3; text-decoration: underline } /* Generic.Underline */ .kc { color: #79c0ff } /* Keyword.Constant */ .kd { color: #ff7b72 } /* Keyword.Declaration */ .kn { color: #ff7b72 } /* Keyword.Namespace */ .kp { color: #79c0ff } /* Keyword.Pseudo */ .kr { color: #ff7b72 } /* Keyword.Reserved */ .kt { color: #ff7b72 } /* Keyword.Type */ .ld { color: #79c0ff } /* Literal.Date */ .m { color: #a5d6ff } /* Literal.Number */ .s { color: #a5d6ff } /* Literal.String */ .na { color: #e6edf3 } /* Name.Attribute */ .nb { color: #e6edf3 } /* Name.Builtin */ .nc { color: #f0883e; font-weight: bold } /* Name.Class */ .no { color: #79c0ff; font-weight: bold } /* Name.Constant */ .nd { color: #d2a8ff; font-weight: bold } /* Name.Decorator */ .ni { color: #ffa657 } /* Name.Entity */ .ne { color: #f0883e; font-weight: bold } /* Name.Exception */ .nf { color: #d2a8ff; font-weight: bold } /* Name.Function */ .nl { color: #79c0ff; font-weight: bold } /* Name.Label */ .nn { color: #ff7b72 } /* Name.Namespace */ .nx { color: #e6edf3 } /* Name.Other */ .py { color: #79c0ff } /* Name.Property */ .nt { color: #7ee787 } /* Name.Tag */ .nv { color: #79c0ff } /* Name.Variable */ .ow { color: #ff7b72; font-weight: bold } /* Operator.Word */ .pm { color: #e6edf3 } /* Punctuation.Marker */ .w { color: #6e7681 } /* Text.Whitespace */ .mb { color: #a5d6ff } /* Literal.Number.Bin */ .mf { color: #a5d6ff } /* Literal.Number.Float */ .mh { color: #a5d6ff } /* Literal.Number.Hex */ .mi { color: #a5d6ff } /* Literal.Number.Integer */ .mo { color: #a5d6ff } /* Literal.Number.Oct */ .sa { color: #79c0ff } /* Literal.String.Affix */ .sb { color: #a5d6ff } /* Literal.String.Backtick */ .sc { color: #a5d6ff } /* Literal.String.Char */ .dl { color: #79c0ff } /* Literal.String.Delimiter */ .sd { color: #a5d6ff } /* Literal.String.Doc */ .s2 { color: #a5d6ff } /* Literal.String.Double */ .se { color: #79c0ff } /* Literal.String.Escape */ .sh { color: #79c0ff } /* Literal.String.Heredoc */ .si { color: #a5d6ff } /* Literal.String.Interpol */ .sx { color: #a5d6ff } /* Literal.String.Other */ .sr { color: #79c0ff } /* Literal.String.Regex */ .s1 { color: #a5d6ff } /* Literal.String.Single */ .ss { color: #a5d6ff } /* Literal.String.Symbol */ .bp { color: #e6edf3 } /* Name.Builtin.Pseudo */ .fm { color: #d2a8ff; font-weight: bold } /* Name.Function.Magic */ .vc { color: #79c0ff } /* Name.Variable.Class */ .vg { color: #79c0ff } /* Name.Variable.Global */ .vi { color: #79c0ff } /* Name.Variable.Instance */ .vm { color: #79c0ff } /* Name.Variable.Magic */ .il { color: #a5d6ff } /* Literal.Number.Integer.Long */ GCC Code Coverage Report ./ Date: 2024-12-13 21:47:27 Coverage: low: \u2265 0% medium: \u2265 75.0% high: \u2265 90.0% Lines: 685/753 91.0% Functions: 73/85 85.9% Branches: 333/464 71.8% Overall list of functions Function (File:Line) Call count Block coverage c_dprintf (deps/cbase/src/print.c:92) not called 0.0% c_dprintv (deps/cbase/src/print.c:83) called 1481 times 100.0% c_dwprintf (deps/cbase/src/wprint.c:110) not called 0.0% c_dwprintv (deps/cbase/src/wprint.c:101) called 49 times 100.0% c_endw (deps/cbase/src/wprint.c:20) called 20 times 100.0% c_print_init (deps/cbase/src/print.c:8) called 1 time 100.0% c_printf (deps/cbase/src/print.c:26) not called 0.0% c_printv (deps/cbase/src/print.c:13) called 1404 times 83.0% c_printv_cb (deps/cbase/src/print.c:72) called 1404 times 100.0% c_sprintf (deps/cbase/src/print.c:63) not called 0.0% c_sprintv (deps/cbase/src/print.c:35) not called 0.0% c_sprintv_cb (deps/cbase/src/print.c:78) not called 0.0% c_startw (deps/cbase/src/wprint.c:9) called 20 times 100.0% c_swprintf (deps/cbase/src/wprint.c:81) not called 0.0% c_swprintv (deps/cbase/src/wprint.c:53) not called 0.0% c_swprintv_cb (deps/cbase/src/wprint.c:96) not called 0.0% c_wprintf (deps/cbase/src/wprint.c:44) not called 0.0% c_wprintv (deps/cbase/src/wprint.c:31) called 47 times 83.0% c_wprintv_cb (deps/cbase/src/wprint.c:90) called 47 times 100.0% empty_test (test/main.c:274) called 2 times 100.0% main (test/main.c:453) called 1 time 100.0% mem_stats_alloc (deps/cbase/src/mem_stats.c:21) called 1 time 75.0% mem_stats_free (deps/cbase/src/mem_stats.c:46) called 1 time 75.0% mem_stats_get (deps/cbase/src/mem_stats.c:16) not called 0.0% mem_stats_realloc (deps/cbase/src/mem_stats.c:33) not called 0.0% mem_stats_set (deps/cbase/src/mem_stats.c:7) called 1 time 100.0% print_header (src/test.c:313) called 214 times 100.0% print_str (src/test.c:444) called 24 times 100.0% print_values (src/test.c:364) called 50 times 98.0% print_wstr (src/test.c:535) called 11 times 100.0% pur (src/test.c:124) called 5 times 100.0% pv (src/test.c:130) called 424 times 100.0% pvr (src/test.c:136) called 19 times 100.0% setup (test/main.c:324) called 1 time 100.0% t_end (src/test.c:204) called 13 times 100.0% t_expect_ch (src/test.c:416) called 1 time 100.0% t_expect_fail (src/test.c:675) called 31 times 100.0% t_expect_fmt (src/test.c:631) called 6 times 100.0% t_expect_fstr_end (src/test.c:719) called 8 times 100.0% t_expect_fstr_start (src/test.c:703) called 8 times 100.0% t_expect_g (src/test.c:422) called 41 times 100.0% t_expect_m (src/test.c:433) called 9 times 85.0% t_expect_str (src/test.c:641) called 7 times 88.0% t_expect_strn (src/test.c:646) called 4 times 90.0% t_expect_wstr (src/test.c:658) called 7 times 88.0% t_expect_wstrn (src/test.c:663) called 4 times 90.0% t_finish (src/test.c:159) called 3 times 82.0% t_fprintf (src/test.c:687) called 8 times 100.0% t_get_data (src/test.c:52) called 7 times 100.0% t_get_priv (src/test.c:119) called 1 time 100.0% t_init (src/test.c:142) called 1 time 100.0% t_printf (src/test.c:67) called 1450 times 100.0% t_printv (src/test.c:62) called 1481 times 100.0% t_run (src/test.c:175) called 3 times 100.0% t_scan (src/test.c:260) called 7 times 100.0% t_send (src/test.c:245) called 5 times 88.0% t_set_data (src/test.c:57) called 9 times 100.0% t_set_print (src/test.c:105) called 7 times 100.0% t_set_priv (src/test.c:90) called 1 time 100.0% t_set_wprint (src/test.c:112) called 7 times 100.0% t_setup (src/test.c:95) called 1 time 100.0% t_sstart (src/test.c:232) called 3 times 100.0% t_start (src/test.c:195) called 13 times 100.0% t_strcmp (src/test.c:269) called 17 times 100.0% t_strncmp (src/test.c:280) called 6 times 100.0% t_teardown (src/test.c:100) called 1 time 100.0% t_wprintf (src/test.c:81) called 49 times 100.0% t_wprintv (src/test.c:76) called 49 times 100.0% t_wstrcmp (src/test.c:291) called 9 times 100.0% t_wstrncmp (src/test.c:302) called 6 times 100.0% teardown (test/main.c:330) called 1 time 100.0% test_ctest (test/main.c:435) called 1 time 77.0% test_fail_test (test/main.c:68) called 1 time 100.0% test_param_test (test/main.c:251) called 1 time 67.0% test_subsubtest (test/main.c:258) called 1 time 100.0% test_subtest (test/main.c:264) called 1 time 79.0% test_success_test (test/main.c:31) called 1 time 56.0% test_t_end (test/main.c:289) called 1 time 81.0% test_t_expect (test/main.c:356) called 1 time 100.0% test_t_finish (test/main.c:410) called 1 time 100.0% test_t_run (test/main.c:279) called 1 time 54.0% test_t_send (test/main.c:393) called 1 time 100.0% test_t_set_print (test/main.c:375) called 1 time 100.0% test_t_set_priv (test/main.c:309) called 1 time 75.0% test_t_setup_teardown (test/main.c:336) called 1 time 100.0% List of functions deps/cbase/src/mem_stats.c 13 of 25 lines (52.0%) 52.0% 3 of 5 functions 60.0% 2 of 6 branches 33.3% deps/cbase/src/print.c 15 of 43 lines (34.9%) 34.9% 4 of 9 functions 44.4% 3 of 18 branches 16.7% deps/cbase/src/wprint.c 22 of 50 lines (44.0%) 44.0% 5 of 10 functions 50.0% 3 of 18 branches 16.7% src/test.c 375 of 375 lines (100.0%) 100.0% 43 of 43 functions 100.0% 258 of 288 branches 89.6% test/main.c 260 of 260 lines (100.0%) 100.0% 18 of 18 functions 100.0% 67 of 134 branches 50.0% ./ File: deps/cbase/src/mem_stats.c Date: 2024-12-13 21:47:27 Lines: 13/25 52.0% Functions: 3/5 60.0% Branches: 2/6 33.3% List of functions Function (Line) Call count Block coverage mem_stats_alloc (line 21) called 1 time 75.0% mem_stats_free (line 46) called 1 time 75.0% mem_stats_get (line 16) not called 0.0% mem_stats_realloc (line 33) not called 0.0% mem_stats_set (line 7) called 1 time 100.0% Line Branch Exec Source 1 #include \"mem_stats.h\" 2 3 #define MAX(a, b) (a) > (b) ? (a) : (b) 4 5 static mem_stats_t * s_stats = NULL ; 6 7 1 const mem_stats_t * mem_stats_set ( mem_stats_t * stats ) 8 { 9 1 const mem_stats_t * tmp = s_stats ; 10 11 1 s_stats = stats ; 12 13 1 return tmp ; 14 } 15 16 \u2717 const mem_stats_t * mem_stats_get () 17 { 18 \u2717 return s_stats ; 19 } 20 21 1 void mem_stats_alloc ( size_t size ) 22 { 23 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 1 times. 1 if ( s_stats == NULL ) { 24 \u2717 return ; 25 } 26 27 1 s_stats -> mem += size ; 28 1 s_stats -> peak = MAX ( s_stats -> mem , s_stats -> peak ); 29 1 s_stats -> total += size ; 30 1 s_stats -> allocs ++ ; 31 } 32 33 \u2717 void mem_stats_realloc ( size_t old_size , size_t new_size ) 34 { 35 \u2717 if ( s_stats == NULL ) { 36 \u2717 return ; 37 } 38 39 \u2717 s_stats -> mem += new_size - old_size ; 40 \u2717 s_stats -> peak = MAX ( s_stats -> mem , s_stats -> peak ); 41 \u2717 s_stats -> total -= old_size ; 42 \u2717 s_stats -> total += new_size ; 43 \u2717 s_stats -> reallocs ++ ; 44 } 45 46 1 void mem_stats_free ( size_t size ) 47 { 48 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 1 times. 1 if ( s_stats == NULL ) { 49 \u2717 return ; 50 } 51 52 1 s_stats -> mem -= size ; 53 } 54 ./ File: src/test.c Date: 2024-12-13 21:47:27 Lines: 375/375 100.0% Functions: 43/43 100.0% Branches: 258/288 89.6% List of functions Function (Line) Call count Block coverage print_header (line 313) called 214 times 100.0% print_str (line 444) called 24 times 100.0% print_values (line 364) called 50 times 98.0% print_wstr (line 535) called 11 times 100.0% pur (line 124) called 5 times 100.0% pv (line 130) called 424 times 100.0% pvr (line 136) called 19 times 100.0% t_end (line 204) called 13 times 100.0% t_expect_ch (line 416) called 1 time 100.0% t_expect_fail (line 675) called 31 times 100.0% t_expect_fmt (line 631) called 6 times 100.0% t_expect_fstr_end (line 719) called 8 times 100.0% t_expect_fstr_start (line 703) called 8 times 100.0% t_expect_g (line 422) called 41 times 100.0% t_expect_m (line 433) called 9 times 85.0% t_expect_str (line 641) called 7 times 88.0% t_expect_strn (line 646) called 4 times 90.0% t_expect_wstr (line 658) called 7 times 88.0% t_expect_wstrn (line 663) called 4 times 90.0% t_finish (line 159) called 3 times 82.0% t_fprintf (line 687) called 8 times 100.0% t_get_data (line 52) called 7 times 100.0% t_get_priv (line 119) called 1 time 100.0% t_init (line 142) called 1 time 100.0% t_printf (line 67) called 1450 times 100.0% t_printv (line 62) called 1481 times 100.0% t_run (line 175) called 3 times 100.0% t_scan (line 260) called 7 times 100.0% t_send (line 245) called 5 times 88.0% t_set_data (line 57) called 9 times 100.0% t_set_print (line 105) called 7 times 100.0% t_set_priv (line 90) called 1 time 100.0% t_set_wprint (line 112) called 7 times 100.0% t_setup (line 95) called 1 time 100.0% t_sstart (line 232) called 3 times 100.0% t_start (line 195) called 13 times 100.0% t_strcmp (line 269) called 17 times 100.0% t_strncmp (line 280) called 6 times 100.0% t_teardown (line 100) called 1 time 100.0% t_wprintf (line 81) called 49 times 100.0% t_wprintv (line 76) called 49 times 100.0% t_wstrcmp (line 291) called 9 times 100.0% t_wstrncmp (line 302) called 6 times 100.0% Line Branch Exec Source 1 #include \"test.h\" 2 3 #include \"mem_stats.h\" 4 #include \"platform.h\" 5 6 #include <memory.h> 7 #include <stdio.h> 8 #include <stdlib.h> 9 #include <string.h> 10 #include <wchar.h> 11 12 #if defined(C_WIN) 13 #define vsscanf vsscanf_s 14 #endif 15 16 #define BYTE_TO_BIN_PATTERN \"%c%c%c%c%c%c%c%c\" 17 18 #define TEST_PREFIX \"test_\" 19 20 // clang-format off 21 #define BYTE_TO_BIN(byte) \\ 22 (byte & 0x80 ? '1' : '0'), \\ 23 (byte & 0x40 ? '1' : '0'), \\ 24 (byte & 0x20 ? '1' : '0'), \\ 25 (byte & 0x10 ? '1' : '0'), \\ 26 (byte & 0x08 ? '1' : '0'), \\ 27 (byte & 0x04 ? '1' : '0'), \\ 28 (byte & 0x02 ? '1' : '0'), \\ 29 (byte & 0x01 ? '1' : '0') 30 // clang-format on 31 32 typedef struct tdata_s { 33 void * priv ; 34 setup_fn setup ; 35 setup_fn teardown ; 36 print_dst_t print ; 37 wprint_dst_t wprint ; 38 long long passed ; 39 long long failed ; 40 int depth ; 41 char * buf ; 42 size_t buf_size ; 43 size_t buf_len ; 44 const char * exp ; 45 size_t exp_len ; 46 size_t mem ; 47 mem_stats_t mem_stats ; 48 } tdata_t ; 49 50 static tdata_t s_data ; 51 52 7 tdata_t t_get_data () 53 { 54 7 return s_data ; 55 } 56 57 9 void t_set_data ( tdata_t data ) 58 { 59 9 s_data = data ; 60 9 } 61 62 1481 static int t_printv ( const char * fmt , va_list args ) 63 { 64 1481 return c_dprintv ( s_data . print , fmt , args ); 65 } 66 67 1450 static int t_printf ( const char * fmt , ...) 68 { 69 va_list args ; 70 1450 va_start ( args , fmt ); 71 1450 int ret = t_printv ( fmt , args ); 72 1450 va_end ( args ); 73 1450 return ret ; 74 } 75 76 49 static int t_wprintv ( const wchar_t * fmt , va_list args ) 77 { 78 49 return c_dwprintv ( s_data . wprint , fmt , args ); 79 } 80 81 49 static int t_wprintf ( const wchar_t * fmt , ...) 82 { 83 va_list args ; 84 49 va_start ( args , fmt ); 85 49 int ret = t_wprintv ( fmt , args ); 86 49 va_end ( args ); 87 49 return ret ; 88 } 89 90 1 void t_set_priv ( void * priv ) 91 { 92 1 s_data . priv = priv ; 93 1 } 94 95 1 void t_setup ( setup_fn setup ) 96 { 97 1 s_data . setup = setup ; 98 1 } 99 100 1 void t_teardown ( teardown_fn teardown ) 101 { 102 1 s_data . teardown = teardown ; 103 1 } 104 105 7 print_dst_t t_set_print ( print_dst_t print ) 106 { 107 7 print_dst_t cur = s_data . print ; 108 7 s_data . print = print ; 109 7 return cur ; 110 } 111 112 7 wprint_dst_t t_set_wprint ( wprint_dst_t wprint ) 113 { 114 7 wprint_dst_t cur = s_data . wprint ; 115 7 s_data . wprint = wprint ; 116 7 return cur ; 117 } 118 119 1 void * t_get_priv () 120 { 121 1 return s_data . priv ; 122 } 123 124 5 static inline int pur () 125 { 126 5 t_printf ( \"\u2514\u2500\" ); 127 5 return 2 ; 128 } 129 130 424 static inline int pv () 131 { 132 424 t_printf ( \"\u2502 \" ); 133 424 return 2 ; 134 } 135 136 19 static inline int pvr () 137 { 138 19 t_printf ( \"\u251c\u2500\" ); 139 19 return 2 ; 140 } 141 142 1 void t_init () 143 { 144 1 s_data . print = PRINT_DST_STD (); 145 1 s_data . wprint = PRINT_DST_WSTD (); 146 147 1 s_data . passed = 0 ; 148 1 s_data . failed = 0 ; 149 1 s_data . depth = -1 ; 150 151 1 s_data . buf_size = 256 ; 152 1 s_data . buf_len = 0 ; 153 154 1 s_data . buf = malloc ( s_data . buf_size ); 155 156 1 mem_stats_set ( & s_data . mem_stats ); 157 1 } 158 159 3 int t_finish () 160 { 161 2/2 \u2713 Branch 0 taken 2 times. \u2713 Branch 1 taken 1 times. 3 if ( s_data . failed == 0 ) { 162 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 2 times. 2 t_printf ( \" \\033 [0;32mPASS %llu %s \\033 [0m \\n \" , s_data . passed , s_data . passed == 1 ? \"TEST\" : \"TESTS\" ); 163 } else { 164 1 t_printf ( \" \\033 [0;31mFAIL %llu/%llu %s \\033 [0m \\n \" , 165 s_data . failed , 166 1 s_data . failed + s_data . passed , 167 1/2 \u2713 Branch 0 taken 1 times. \u2717 Branch 1 not taken. 1 s_data . failed == 1 ? \"TEST\" : \"TESTS\" ); 168 } 169 170 3 free ( s_data . buf ); 171 172 3 return ( int ) s_data . failed ; 173 } 174 175 3 int t_run ( test_fn fn , int print ) 176 { 177 3 print_dst_t printfn = { 0 }; 178 3 wprint_dst_t wprintfn = { 0 }; 179 180 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 2 times. 3 if ( print == 0 ) { 181 1 printfn = t_set_print ( PRINT_DST_NONE ()); 182 1 wprintfn = t_set_wprint ( PRINT_DST_WNONE ()); 183 } 184 185 3 int ret = fn (); 186 187 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 2 times. 3 if ( print == 0 ) { 188 1 t_set_print ( printfn ); 189 1 t_set_wprint ( wprintfn ); 190 } 191 192 3 return ret ; 193 } 194 195 13 void t_start () 196 { 197 13 s_data . mem = s_data . mem_stats . mem ; 198 199 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 12 times. 13 if ( s_data . setup ) { 200 1 s_data . setup ( s_data . priv ); 201 } 202 13 } 203 204 13 int t_end ( int passed , const char * func ) 205 { 206 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 12 times. 13 if ( s_data . teardown ) { 207 1 s_data . teardown ( s_data . priv ); 208 } 209 210 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 12 times. 13 if ( ! passed ) { 211 1 s_data . failed ++ ; 212 1 return 1 ; 213 } 214 215 2/2 \u2713 Branch 0 taken 3 times. \u2713 Branch 1 taken 12 times. 15 for ( int i = 0 ; i < s_data . depth ; i ++ ) { 216 3 pv (); 217 } 218 12 pvr (); 219 220 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 11 times. 12 if ( s_data . mem != s_data . mem_stats . mem ) { 221 1 t_printf ( \" \\033 [0;31mLEAK %s: %d B \\033 [0m \\n \" , func + sizeof ( TEST_PREFIX ) - 1 , s_data . mem_stats . mem - s_data . mem ); 222 1 s_data . failed ++ ; 223 1 return 1 ; 224 } 225 226 11 t_printf ( \" \\033 [0;32mPASS %s \\033 [0m \\n \" , func + sizeof ( TEST_PREFIX ) - 1 ); 227 228 11 s_data . passed ++ ; 229 11 return 0 ; 230 } 231 232 3 void t_sstart ( const char * func ) 233 { 234 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 3 times. 4 for ( int i = 0 ; i < s_data . depth ; i ++ ) { 235 1 pv (); 236 } 237 2/2 \u2713 Branch 0 taken 2 times. \u2713 Branch 1 taken 1 times. 3 if ( s_data . depth >= 0 ) { 238 2 pvr (); 239 } 240 241 3 t_printf ( \"%s \\n \" , func + sizeof ( TEST_PREFIX ) - 1 ); 242 3 s_data . depth ++ ; 243 3 } 244 245 5 int t_send ( int passed , int failed ) 246 { 247 2/2 \u2713 Branch 0 taken 3 times. \u2713 Branch 1 taken 5 times. 8 for ( int i = 0 ; i < s_data . depth ; i ++ ) { 248 3 pv (); 249 } 250 5 pur (); 251 2/2 \u2713 Branch 0 taken 4 times. \u2713 Branch 1 taken 1 times. 5 if ( failed == 0 ) { 252 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 4 times. 4 t_printf ( \" \\033 [0;32mPASS %d %s \\033 [0m \\n \" , passed , passed == 1 ? \"TEST\" : \"TESTS\" ); 253 } else { 254 1/2 \u2713 Branch 0 taken 1 times. \u2717 Branch 1 not taken. 1 t_printf ( \" \\033 [0;31mFAIL %d/%d %s \\033 [0m \\n \" , failed , failed + passed , failed == 1 ? \"TEST\" : \"TESTS\" ); 255 } 256 5 s_data . depth -- ; 257 5 return failed > 0 ; 258 } 259 260 7 int t_scan ( const char * str , const char * fmt , ...) 261 { 262 va_list args ; 263 7 va_start ( args , fmt ); 264 7 const int ret = vsscanf ( str , fmt , args ); 265 7 va_end ( args ); 266 7 return ret ; 267 } 268 269 17 int t_strcmp ( const char * act , const char * exp ) 270 { 271 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 16 times. \u2713 Branch 2 taken 1 times. \u2717 Branch 3 not taken. 17 if ( act == NULL && exp == NULL ) { 272 1 return 0 ; 273 } 274 3/4 \u2713 Branch 0 taken 16 times. \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 15 times. 16 if ( act == NULL || exp == NULL ) { 275 1 return 1 ; 276 } 277 15 return strcmp ( act , exp ); 278 } 279 280 6 int t_strncmp ( const char * act , const char * exp , size_t len ) 281 { 282 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 5 times. \u2713 Branch 2 taken 1 times. \u2717 Branch 3 not taken. 6 if ( act == NULL && exp == NULL ) { 283 1 return 0 ; 284 } 285 3/4 \u2713 Branch 0 taken 5 times. \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 4 times. 5 if ( act == NULL || exp == NULL ) { 286 1 return 1 ; 287 } 288 4 return strncmp ( act , exp , len ); 289 } 290 291 9 int t_wstrcmp ( const wchar_t * act , const wchar_t * exp ) 292 { 293 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 8 times. \u2713 Branch 2 taken 1 times. \u2717 Branch 3 not taken. 9 if ( act == NULL && exp == NULL ) { 294 1 return 0 ; 295 } 296 3/4 \u2713 Branch 0 taken 8 times. \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 7 times. 8 if ( act == NULL || exp == NULL ) { 297 1 return 1 ; 298 } 299 7 return wcscmp ( act , exp ); 300 } 301 302 6 int t_wstrncmp ( const wchar_t * act , const wchar_t * exp , size_t len ) 303 { 304 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 5 times. \u2713 Branch 2 taken 1 times. \u2717 Branch 3 not taken. 6 if ( act == NULL && exp == NULL ) { 305 1 return 0 ; 306 } 307 3/4 \u2713 Branch 0 taken 5 times. \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 4 times. 5 if ( act == NULL || exp == NULL ) { 308 1 return 1 ; 309 } 310 4 return wcsncmp ( act , exp , len ); 311 } 312 313 214 static void print_header ( int passed , const char * file , const char * func , int line , int child ) 314 { 315 4/4 \u2713 Branch 0 taken 9 times. \u2713 Branch 1 taken 205 times. \u2713 Branch 2 taken 5 times. \u2713 Branch 3 taken 4 times. 214 if ( passed && child == 0 ) { 316 5 int len = 0 ; 317 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 5 times. 6 for ( int i = 0 ; i < s_data . depth ; i ++ ) { 318 1 len += pv (); 319 } 320 5 len += pvr (); 321 5 t_printf ( \" \\033 [0;31mFAIL %s \\033 [0m \\n \" , func + sizeof ( TEST_PREFIX ) - 1 ); 322 } 323 324 2/2 \u2713 Branch 0 taken 202 times. \u2713 Branch 1 taken 214 times. 416 for ( int i = 0 ; i < s_data . depth ; i ++ ) { 325 202 pv (); 326 } 327 214 pv (); 328 329 214 t_printf ( \" \\033 [0;31m\" ); 330 331 2/2 \u2713 Branch 0 taken 130 times. \u2713 Branch 1 taken 84 times. 214 if ( file == NULL ) { 332 130 return ; 333 } 334 335 84 t_printf ( \"%s:%d: \" , file , line ); 336 } 337 338 // clang-format off 339 #define get_char(_size, _args) \\ 340 (char)va_arg(_args, int) 341 342 #define get_short(_size, _args) \\ 343 _size == 1 ? (short)va_arg(_args, int) : \\ 344 _size == 2 ? (short)va_arg(_args, int) : \\ 345 0 346 347 #define get_int(_size, _args) \\ 348 _size == 1 ? (int)va_arg(_args, int) : \\ 349 _size == 2 ? (int)va_arg(_args, int) : \\ 350 _size == 4 ? (int)va_arg(_args, int) : \\ 351 0 352 // clang-format on 353 354 #define get_long(_size, _args) \\ 355 _size == 1 ? (long long)va_arg(_args, int) \\ 356 : _size == 2 ? (long long)va_arg(_args, int) \\ 357 : _size == 4 ? (long long)va_arg(_args, int) \\ 358 : _size == 8 ? (long long)va_arg(_args, long long) \\ 359 : 0 360 361 #define MIN(a, b) ((a) < (b) ? (a) : (b)) 362 #define MAX(a, b) ((a) > (b) ? (a) : (b)) 363 364 50 static void print_values ( int passed , const char * file , const char * func , int line , const char * act , size_t act_size , const char * exp , 365 size_t exp_size , const char * cond , va_list args ) 366 { 367 50 print_header ( passed , file , func , line , 0 ); 368 50 t_printf ( \" \\033 [0;31m%s %s %s (\" , act , cond , exp ); 369 370 50 int max_size = MAX (( int ) act_size , ( int ) exp_size ); 371 372 6/6 \u2713 Branch 0 taken 4 times. \u2713 Branch 1 taken 4 times. \u2713 Branch 2 taken 7 times. \u2713 Branch 3 taken 21 times. \u2713 Branch 4 taken 13 times. \u2713 Branch 5 taken 1 times. 50 switch ( max_size ) { 373 4 case 0 : { 374 4 const unsigned char a = get_char ( act_size , args ); 375 4 const unsigned char b = get_char ( exp_size , args ); 376 377 4/4 \u2713 Branch 0 taken 2 times. \u2713 Branch 1 taken 2 times. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 3 times. 4 t_printf ( \"%c %s %c\" , a ? '1' : '0' , cond , b ? '1' : '0' ); 378 4 break ; 379 } 380 4 case 1 : { 381 4 const unsigned char a = get_char ( act_size , args ); 382 4 const unsigned char b = get_char ( exp_size , args ); 383 384 32/32 \u2713 Branch 0 taken 2 times. \u2713 Branch 1 taken 2 times. \u2713 Branch 2 taken 2 times. \u2713 Branch 3 taken 2 times. \u2713 Branch 4 taken 2 times. \u2713 Branch 5 taken 2 times. \u2713 Branch 6 taken 2 times. \u2713 Branch 7 taken 2 times. \u2713 Branch 8 taken 2 times. \u2713 Branch 9 taken 2 times. \u2713 Branch 10 taken 2 times. \u2713 Branch 11 taken 2 times. \u2713 Branch 12 taken 2 times. \u2713 Branch 13 taken 2 times. \u2713 Branch 14 taken 2 times. \u2713 Branch 15 taken 2 times. \u2713 Branch 16 taken 2 times. \u2713 Branch 17 taken 2 times. \u2713 Branch 18 taken 2 times. \u2713 Branch 19 taken 2 times. \u2713 Branch 20 taken 2 times. \u2713 Branch 21 taken 2 times. \u2713 Branch 22 taken 2 times. \u2713 Branch 23 taken 2 times. \u2713 Branch 24 taken 2 times. \u2713 Branch 25 taken 2 times. \u2713 Branch 26 taken 2 times. \u2713 Branch 27 taken 2 times. \u2713 Branch 28 taken 2 times. \u2713 Branch 29 taken 2 times. \u2713 Branch 30 taken 2 times. \u2713 Branch 31 taken 2 times. 4 t_printf ( BYTE_TO_BIN_PATTERN \" %s \" BYTE_TO_BIN_PATTERN , BYTE_TO_BIN ( a ), cond , BYTE_TO_BIN ( b )); 385 4 break ; 386 } 387 7 case 2 : { 388 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 6 times. \u2713 Branch 3 taken 6 times. \u2717 Branch 4 not taken. 7 const unsigned short a = get_short ( act_size , args ); 389 4/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 6 times. \u2713 Branch 3 taken 5 times. \u2713 Branch 4 taken 1 times. 7 const unsigned short b = get_short ( exp_size , args ); 390 391 7 t_printf ( \"%04X %s %04X\" , a , cond , b ); 392 7 break ; 393 } 394 21 case 4 : { 395 5/6 \u2713 Branch 0 taken 2 times. \u2713 Branch 1 taken 19 times. \u2713 Branch 3 taken 2 times. \u2713 Branch 4 taken 17 times. \u2713 Branch 6 taken 17 times. \u2717 Branch 7 not taken. 21 const int a = get_int ( act_size , args ); 396 6/6 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 20 times. \u2713 Branch 3 taken 1 times. \u2713 Branch 4 taken 19 times. \u2713 Branch 6 taken 18 times. \u2713 Branch 7 taken 1 times. 21 const int b = get_int ( exp_size , args ); 397 398 21 t_printf ( \"%08X %s %08X\" , a , cond , b ); 399 21 break ; 400 } 401 13 case 8 : { 402 7/8 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 12 times. \u2713 Branch 3 taken 1 times. \u2713 Branch 4 taken 11 times. \u2713 Branch 6 taken 1 times. \u2713 Branch 7 taken 10 times. \u2713 Branch 9 taken 10 times. \u2717 Branch 10 not taken. 13 const long long a = get_long ( act_size , args ); 403 8/8 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 12 times. \u2713 Branch 3 taken 1 times. \u2713 Branch 4 taken 11 times. \u2713 Branch 6 taken 3 times. \u2713 Branch 7 taken 8 times. \u2713 Branch 9 taken 7 times. \u2713 Branch 10 taken 1 times. 13 const long long b = get_long ( exp_size , args ); 404 405 13 t_printf ( \"%016llX %s %016llX\" , a , cond , b ); 406 13 break ; 407 } 408 1 default : 409 1 t_printf ( \"Unsupported type of size: %zu \\n \" , act_size ); 410 1 return ; 411 } 412 413 49 t_printf ( \")\" ); 414 } 415 416 1 void t_expect_ch ( int passed , const char * file , const char * func , int line , const char * check ) 417 { 418 1 print_header ( passed , file , func , line , 0 ); 419 1 t_printf ( \"%s \\033 [0m \\n \" , check ); 420 1 } 421 422 41 void t_expect_g ( int passed , const char * file , const char * func , int line , const char * act , size_t act_size , const char * exp , 423 size_t exp_size , const char * cond , ...) 424 { 425 va_list args ; 426 41 va_start ( args , cond ); 427 41 print_values ( passed , file , func , line , act , act_size , exp , exp_size , cond , args ); 428 41 va_end ( args ); 429 430 41 t_printf ( \" \\033 [0m \\n \" ); 431 41 } 432 433 9 void t_expect_m ( int passed , const char * file , const char * func , int line , const char * act , size_t act_size , const char * exp , 434 size_t exp_size , const char * cond , unsigned char mask , ...) 435 { 436 va_list args ; 437 9 va_start ( args , mask ); 438 9 print_values ( passed , file , func , line , act , act_size , exp , exp_size , cond , args ); 439 9 va_end ( args ); 440 441 12/16 \u2713 Branch 0 taken 8 times. \u2713 Branch 1 taken 1 times. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 8 times. \u2713 Branch 4 taken 1 times. \u2713 Branch 5 taken 8 times. \u2713 Branch 6 taken 1 times. \u2713 Branch 7 taken 8 times. \u2717 Branch 8 not taken. \u2713 Branch 9 taken 9 times. \u2717 Branch 10 not taken. \u2713 Branch 11 taken 9 times. \u2717 Branch 12 not taken. \u2713 Branch 13 taken 9 times. \u2717 Branch 14 not taken. \u2713 Branch 15 taken 9 times. 9 t_printf ( \" & \" BYTE_TO_BIN_PATTERN \" \\033 [0m \\n \" , BYTE_TO_BIN ( mask )); 442 9 } 443 444 24 static void print_str ( int passed , const char * file , const char * func , int line , const char * act_str , const char * exp_str , size_t act_len , 445 size_t exp_len ) 446 { 447 24 size_t ln = 0 ; 448 24 size_t col = 0 ; 449 24 size_t line_start = 0 ; 450 24 size_t exp_line_end = 0 ; 451 24 size_t act_line_end = 0 ; 452 24 int diff = 0 ; 453 454 4/4 \u2713 Branch 0 taken 327 times. \u2713 Branch 1 taken 17 times. \u2713 Branch 2 taken 322 times. \u2713 Branch 3 taken 5 times. 344 for ( size_t i = 0 ; i < exp_len && i < act_len ; i ++ ) { 455 322 const char exp = exp_str [ i ]; 456 322 const char act = act_str [ i ]; 457 458 2/2 \u2713 Branch 0 taken 29 times. \u2713 Branch 1 taken 293 times. 322 if ( act != exp ) { 459 29 diff = 1 ; 460 } 461 462 2/2 \u2713 Branch 0 taken 286 times. \u2713 Branch 1 taken 36 times. 322 if ( diff == 0 ) { 463 2/2 \u2713 Branch 0 taken 5 times. \u2713 Branch 1 taken 281 times. 286 if ( exp == '\\n' ) { 464 5 col = 0 ; 465 5 ln ++ ; 466 5 line_start = i + 1 ; 467 } else { 468 281 col ++ ; 469 } 470 } else { 471 3/4 \u2713 Branch 0 taken 3 times. \u2713 Branch 1 taken 33 times. \u2713 Branch 2 taken 3 times. \u2717 Branch 3 not taken. 36 if ( exp == '\\n' && exp_line_end == 0 ) { 472 3 exp_line_end = i + 1 ; 473 } 474 3/4 \u2713 Branch 0 taken 3 times. \u2713 Branch 1 taken 33 times. \u2713 Branch 2 taken 3 times. \u2717 Branch 3 not taken. 36 if ( act == '\\n' && act_line_end == 0 ) { 475 3 act_line_end = i + 1 ; 476 } 477 4/4 \u2713 Branch 0 taken 3 times. \u2713 Branch 1 taken 33 times. \u2713 Branch 2 taken 2 times. \u2713 Branch 3 taken 1 times. 36 if ( exp_line_end != 0 && act_line_end != 0 ) { 478 2 break ; 479 } 480 } 481 } 482 483 4/4 \u2713 Branch 0 taken 10 times. \u2713 Branch 1 taken 14 times. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 9 times. 24 if ( diff == 0 && exp_len == act_len ) { 484 1 return ; 485 } 486 487 2/2 \u2713 Branch 0 taken 20 times. \u2713 Branch 1 taken 3 times. 23 if ( exp_line_end == 0 ) { 488 20 exp_line_end = exp_len ; 489 } 490 2/2 \u2713 Branch 0 taken 20 times. \u2713 Branch 1 taken 3 times. 23 if ( act_line_end == 0 ) { 491 20 act_line_end = act_len ; 492 } 493 494 23 print_header ( passed , file , func , line , 1 ); 495 23 t_printf ( \" \\033 [0m \\n \" ); 496 23 print_header ( passed , NULL , NULL , 0 , 1 ); 497 498 23 int exp_app = 0 ; 499 23 t_printf ( \"exp:%d: \" , ln ); 500 2/2 \u2713 Branch 0 taken 103 times. \u2713 Branch 1 taken 23 times. 126 for ( size_t i = 0 ; i < exp_line_end - line_start ; i ++ ) { 501 103 char c = exp_str [ line_start + i ]; 502 // clang-format off 503 4/4 \u2713 Branch 0 taken 5 times. \u2713 Branch 1 taken 2 times. \u2713 Branch 2 taken 4 times. \u2713 Branch 3 taken 92 times. 103 switch ( c ) { 504 5 case '\\n' : t_printf ( \" \\\\ n\" ); exp_app += ( i <= col ? 1 : 0 ); break ; 505 2 case '\\r' : t_printf ( \" \\\\ r\" ); exp_app += ( i <= col ? 1 : 0 ); break ; 506 4 case '\\t' : t_printf ( \" \\\\ t\" ); exp_app += ( i <= col ? 1 : 0 ); break ; 507 92 default : t_printf ( \"%c\" , c ); break ; 508 } 509 // clang-format on 510 } 511 512 23 t_printf ( \" \\033 [0m \\n \" ); 513 23 print_header ( passed , NULL , NULL , 0 , 1 ); 514 23 t_printf ( \" \\033 [0;31m\" ); 515 516 23 int act_app = 0 ; 517 23 int h_len = t_printf ( \"act:%d: \" , ln ); 518 2/2 \u2713 Branch 0 taken 111 times. \u2713 Branch 1 taken 23 times. 134 for ( size_t i = 0 ; i < act_line_end - line_start ; i ++ ) { 519 111 char c = act_str [ line_start + i ]; 520 // clang-format off 521 4/4 \u2713 Branch 0 taken 5 times. \u2713 Branch 1 taken 2 times. \u2713 Branch 2 taken 4 times. \u2713 Branch 3 taken 100 times. 111 switch ( c ) { 522 5 case '\\n' : t_printf ( \" \\\\ n\" ); act_app += ( i <= col ? 1 : 0 ); break ; 523 2 case '\\r' : t_printf ( \" \\\\ r\" ); act_app += ( i <= col ? 1 : 0 ); break ; 524 4 case '\\t' : t_printf ( \" \\\\ t\" ); act_app += ( i <= col ? 1 : 0 ); break ; 525 100 default : t_printf ( \"%c\" , c ); break ; 526 } 527 // clang-format on 528 } 529 530 23 t_printf ( \" \\033 [0m \\n \" ); 531 23 print_header ( passed , NULL , NULL , 0 , 1 ); 532 23 t_printf ( \" \\033 [0;31m%*s^ \\033 [0m \\n \" , h_len + MIN ( act_app , exp_app ) + col , \"\" ); 533 } 534 535 11 static void print_wstr ( int passed , const char * file , const char * func , int line , const wchar_t * act_str , const wchar_t * exp_str , 536 size_t act_len , size_t exp_len ) 537 { 538 11 size_t ln = 0 ; 539 11 size_t col = 0 ; 540 11 size_t line_start = 0 ; 541 11 size_t exp_line_end = 0 ; 542 11 size_t act_line_end = 0 ; 543 11 int diff = 0 ; 544 545 4/4 \u2713 Branch 0 taken 15 times. \u2713 Branch 1 taken 8 times. \u2713 Branch 2 taken 13 times. \u2713 Branch 3 taken 2 times. 23 for ( size_t i = 0 ; i < exp_len && i < act_len ; i ++ ) { 546 13 const wchar_t exp = exp_str [ i ]; 547 13 const wchar_t act = act_str [ i ]; 548 549 2/2 \u2713 Branch 0 taken 5 times. \u2713 Branch 1 taken 8 times. 13 if ( act != exp ) { 550 5 diff = 1 ; 551 } 552 553 2/2 \u2713 Branch 0 taken 7 times. \u2713 Branch 1 taken 6 times. 13 if ( diff == 0 ) { 554 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 6 times. 7 if ( exp == '\\n' ) { 555 1 col = 0 ; 556 1 ln ++ ; 557 1 line_start = i + 1 ; 558 } else { 559 6 col ++ ; 560 } 561 } else { 562 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 5 times. \u2713 Branch 2 taken 1 times. \u2717 Branch 3 not taken. 6 if ( exp == '\\n' && exp_line_end == 0 ) { 563 1 exp_line_end = i + 1 ; 564 } 565 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 5 times. \u2713 Branch 2 taken 1 times. \u2717 Branch 3 not taken. 6 if ( act == '\\n' && act_line_end == 0 ) { 566 1 act_line_end = i + 1 ; 567 } 568 3/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 5 times. \u2713 Branch 2 taken 1 times. \u2717 Branch 3 not taken. 6 if ( exp_line_end != 0 && act_line_end != 0 ) { 569 1 break ; 570 } 571 } 572 } 573 574 4/4 \u2713 Branch 0 taken 6 times. \u2713 Branch 1 taken 5 times. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 5 times. 11 if ( diff == 0 && exp_len == act_len ) { 575 1 return ; 576 } 577 578 2/2 \u2713 Branch 0 taken 9 times. \u2713 Branch 1 taken 1 times. 10 if ( exp_line_end == 0 ) { 579 9 exp_line_end = exp_len ; 580 } 581 2/2 \u2713 Branch 0 taken 9 times. \u2713 Branch 1 taken 1 times. 10 if ( act_line_end == 0 ) { 582 9 act_line_end = act_len ; 583 } 584 585 10 print_header ( passed , file , func , line , 1 ); 586 10 t_printf ( \" \\033 [0m \\n \" ); 587 10 print_header ( passed , NULL , NULL , 0 , 1 ); 588 589 10 int exp_app = 0 ; 590 10 t_printf ( \"exp(%d): \" , ln ); 591 10 c_startw ( stdout ); 592 2/2 \u2713 Branch 0 taken 24 times. \u2713 Branch 1 taken 10 times. 34 for ( size_t i = 0 ; i < exp_line_end - line_start ; i ++ ) { 593 24 wchar_t c = exp_str [ line_start + i ]; 594 // clang-format off 595 4/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 1 times. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 21 times. 24 switch ( c ) { 596 1 case L '\\n' : t_wprintf ( L \" \\\\ n\" ); exp_app += ( i <= col ? 1 : 0 ); break ; 597 1 case L '\\r' : t_wprintf ( L \" \\\\ r\" ); exp_app += ( i <= col ? 1 : 0 ); break ; 598 1 case L '\\t' : t_wprintf ( L \" \\\\ t\" ); exp_app += ( i <= col ? 1 : 0 ); break ; 599 21 default : t_wprintf ( L \"%c\" , c ); break ; 600 } 601 // clang-format on 602 } 603 10 c_endw ( stdout ); 604 605 10 t_printf ( \" \\033 [0m \\n \" ); 606 10 print_header ( passed , NULL , NULL , 0 , 1 ); 607 10 t_printf ( \" \\033 [0;31m\" ); 608 609 10 int act_app = 0 ; 610 10 int h_len = t_printf ( \"act(%d): \" , ln ); 611 612 10 c_startw ( stdout ); 613 2/2 \u2713 Branch 0 taken 25 times. \u2713 Branch 1 taken 10 times. 35 for ( size_t i = 0 ; i < act_line_end - line_start ; i ++ ) { 614 25 wchar_t c = act_str [ line_start + i ]; 615 // clang-format off 616 4/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 1 times. \u2713 Branch 2 taken 1 times. \u2713 Branch 3 taken 22 times. 25 switch ( c ) { 617 1 case '\\n' : t_wprintf ( L \" \\\\ n\" ); act_app += ( i <= col ? 1 : 0 ); break ; 618 1 case '\\r' : t_wprintf ( L \" \\\\ r\" ); act_app += ( i <= col ? 1 : 0 ); break ; 619 1 case '\\t' : t_wprintf ( L \" \\\\ t\" ); act_app += ( i <= col ? 1 : 0 ); break ; 620 22 default : t_wprintf ( L \"%c\" , c ); break ; 621 } 622 // clang-format on 623 } 624 10 c_endw ( stdout ); 625 626 10 t_printf ( \" \\033 [0m \\n \" ); 627 10 print_header ( passed , NULL , NULL , 0 , 1 ); 628 10 t_printf ( \" \\033 [0;31m%*s^ \\033 [0m \\n \" , h_len + MIN ( act_app , exp_app ) + col , \"\" ); 629 } 630 631 6 void t_expect_fmt ( int passed , const char * file , const char * func , int line , const char * act , unsigned int cnt , ...) 632 { 633 va_list args ; 634 6 va_start ( args , cnt ); 635 6 const char * exp = va_arg ( args , const char * ); 636 6 va_end ( args ); 637 638 6 print_str ( passed , file , func , line , act , exp , ( int ) strlen ( act ), ( int ) strlen ( exp )); 639 6 } 640 641 7 void t_expect_str ( int passed , const char * file , const char * func , int line , const char * act , const char * exp ) 642 { 643 3/4 \u2713 Branch 0 taken 6 times. \u2713 Branch 1 taken 1 times. \u2713 Branch 2 taken 7 times. \u2717 Branch 3 not taken. 7 print_str ( passed , file , func , line , act , exp , act == NULL ? 0 : ( int ) strlen ( act ), exp == NULL ? 0 : ( int ) strlen ( exp )); 644 7 } 645 646 4 void t_expect_strn ( int passed , const char * file , const char * func , int line , const char * act , const char * exp , size_t len ) 647 { 648 4/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 3 times. \u2713 Branch 2 taken 2 times. \u2713 Branch 3 taken 2 times. 15 print_str ( passed , 649 file , 650 func , 651 line , 652 act , 653 exp , 654 2/4 \u2713 Branch 0 taken 4 times. \u2717 Branch 1 not taken. \u2713 Branch 2 taken 2 times. \u2717 Branch 3 not taken. 8 ( int ) MIN ( len , act == NULL ? 0 : strlen ( act )), 655 4/4 \u2713 Branch 0 taken 3 times. \u2713 Branch 1 taken 1 times. \u2713 Branch 2 taken 2 times. \u2713 Branch 3 taken 1 times. 8 ( int ) MIN ( len , exp == NULL ? 0 : strlen ( exp ))); 656 4 } 657 658 7 void t_expect_wstr ( int passed , const char * file , const char * func , int line , const wchar_t * act , const wchar_t * exp ) 659 { 660 3/4 \u2713 Branch 0 taken 6 times. \u2713 Branch 1 taken 1 times. \u2713 Branch 2 taken 7 times. \u2717 Branch 3 not taken. 7 print_wstr ( passed , file , func , line , act , exp , act == NULL ? 0 : ( int ) wcslen ( act ), exp == NULL ? 0 : ( int ) wcslen ( exp )); 661 7 } 662 663 4 void t_expect_wstrn ( int passed , const char * file , const char * func , int line , const wchar_t * act , const wchar_t * exp , size_t len ) 664 { 665 4/4 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 3 times. \u2713 Branch 2 taken 2 times. \u2713 Branch 3 taken 2 times. 15 print_wstr ( passed , 666 file , 667 func , 668 line , 669 act , 670 exp , 671 2/4 \u2713 Branch 0 taken 4 times. \u2717 Branch 1 not taken. \u2713 Branch 2 taken 2 times. \u2717 Branch 3 not taken. 8 ( int ) MIN ( len , act == NULL ? 0 : wcslen ( act )), 672 4/4 \u2713 Branch 0 taken 3 times. \u2713 Branch 1 taken 1 times. \u2713 Branch 2 taken 2 times. \u2713 Branch 3 taken 1 times. 8 ( int ) MIN ( len , exp == NULL ? 0 : wcslen ( exp ))); 673 4 } 674 675 31 void t_expect_fail ( int passed , const char * fmt , ...) 676 { 677 31 print_header ( passed , NULL , NULL , 0 , 0 ); 678 679 va_list args ; 680 31 va_start ( args , fmt ); 681 31 t_printv ( fmt , args ); 682 31 va_end ( args ); 683 684 31 t_printf ( \" \\033 [0m \\n \" ); 685 31 } 686 687 8 int t_fprintf ( void * priv , const char * fmt , ...) 688 { 689 ( void ) priv ; 690 691 va_list args ; 692 8 va_start ( args , fmt ); 693 694 8 int ret = vsnprintf ( s_data . buf + s_data . buf_len , s_data . buf_size - s_data . buf_len , fmt , args ); 695 696 8 va_end ( args ); 697 698 8 s_data . buf_len += ret ; 699 700 8 return ret ; 701 } 702 703 8 void t_expect_fstr_start ( const char * exp , size_t len ) 704 { 705 ( void ) exp ; 706 ( void ) len ; 707 8 s_data . exp = exp ; 708 8 s_data . exp_len = len ; 709 710 2/2 \u2713 Branch 0 taken 1 times. \u2713 Branch 1 taken 7 times. 8 if ( s_data . buf_size < len + 1 ) { 711 1 s_data . buf_size = len + 1 ; 712 1 s_data . buf = realloc ( s_data . buf , s_data . buf_size ); 713 } 714 715 8 memset ( s_data . buf , 0 , s_data . buf_size ); 716 8 s_data . buf_len = 0 ; 717 8 } 718 719 8 int t_expect_fstr_end ( int passed , const char * file , const char * func , int line ) 720 { 721 8 const int ret = t_strcmp ( s_data . buf , s_data . exp ); 722 723 2/2 \u2713 Branch 0 taken 7 times. \u2713 Branch 1 taken 1 times. 8 if ( ret != 0 ) { 724 7 print_str ( passed , file , func , line , s_data . buf , s_data . exp , s_data . buf_len , s_data . exp_len ); 725 } 726 727 8 return ret ; 728 } 729 ./ File: deps/cbase/src/wprint.c Date: 2024-12-13 21:47:27 Lines: 22/50 44.0% Functions: 5/10 50.0% Branches: 3/18 16.7% List of functions Function (Line) Call count Block coverage c_dwprintf (line 110) not called 0.0% c_dwprintv (line 101) called 49 times 100.0% c_endw (line 20) called 20 times 100.0% c_startw (line 9) called 20 times 100.0% c_swprintf (line 81) not called 0.0% c_swprintv (line 53) not called 0.0% c_swprintv_cb (line 96) not called 0.0% c_wprintf (line 44) not called 0.0% c_wprintv (line 31) called 47 times 83.0% c_wprintv_cb (line 90) called 47 times 100.0% Line Branch Exec Source 1 #include \"wprint.h\" 2 3 #include \"platform.h\" 4 5 #include <locale.h> 6 #include <stdio.h> 7 #include <wchar.h> 8 9 20 void c_startw ( void * file ) 10 { 11 20 FILE * f = ( FILE * ) file ; 12 20 fflush ( f ); 13 #if defined(C_WIN) 14 freopen_s ( & f , NULL , \"w\" , f ); 15 #else 16 20 f = freopen ( NULL , \"w\" , f ); 17 #endif 18 20 } 19 20 20 void c_endw ( void * file ) 21 { 22 20 FILE * f = ( FILE * ) file ; 23 20 fflush ( f ); 24 #if defined(C_WIN) 25 freopen_s ( & f , NULL , \"w\" , f ); 26 #else 27 20 f = freopen ( NULL , \"w\" , f ); 28 #endif 29 20 } 30 31 47 int c_wprintv ( const wchar_t * fmt , va_list args ) 32 { 33 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 47 times. 47 if ( fmt == NULL ) { 34 \u2717 return 0 ; 35 } 36 37 va_list copy ; 38 47 va_copy ( copy , args ); 39 47 int ret = vwprintf ( fmt , copy ); 40 47 va_end ( copy ); 41 47 return ret ; 42 } 43 44 \u2717 int c_wprintf ( const wchar_t * fmt , ...) 45 { 46 va_list args ; 47 \u2717 va_start ( args , fmt ); 48 \u2717 int ret = c_wprintv ( fmt , args ); 49 \u2717 va_end ( args ); 50 \u2717 return ret ; 51 } 52 53 \u2717 int c_swprintv ( wchar_t * buf , size_t size , int off , const wchar_t * fmt , va_list args ) 54 { 55 \u2717 if (( buf == NULL && size > 0 ) || off * sizeof ( wchar_t ) > size || fmt == NULL ) { 56 \u2717 return 0 ; 57 } 58 59 \u2717 buf = buf == NULL ? buf : & buf [ off ]; 60 61 va_list copy ; 62 \u2717 va_copy ( copy , args ); 63 int ret ; 64 #if defined(C_WIN) 65 #pragma warning(push) 66 #pragma warning(disable : 6387) 67 ret = vswprintf_s ( buf , size / sizeof ( wchar_t ) - off , fmt , copy ); 68 #pragma warning(push) 69 va_end ( copy ); 70 #else 71 \u2717 ret = vswprintf ( buf , size / sizeof ( wchar_t ) - off , fmt , copy ); 72 \u2717 va_end ( copy ); 73 74 \u2717 if ( size > 0 && ( size_t ) ret > size - off ) { 75 \u2717 return 0 ; 76 } 77 #endif 78 \u2717 return ret ; 79 } 80 81 \u2717 int c_swprintf ( wchar_t * buf , size_t size , int off , const wchar_t * fmt , ...) 82 { 83 va_list args ; 84 \u2717 va_start ( args , fmt ); 85 \u2717 int ret = c_swprintv ( buf , size , off , fmt , args ); 86 \u2717 va_end ( args ); 87 \u2717 return ret ; 88 } 89 90 47 int c_wprintv_cb ( wprint_dst_t dst , const wchar_t * fmt , va_list args ) 91 { 92 ( void ) dst ; 93 47 return c_wprintv ( fmt , args ); 94 } 95 96 \u2717 int c_swprintv_cb ( wprint_dst_t dst , const wchar_t * fmt , va_list args ) 97 { 98 \u2717 return c_swprintv (( wchar_t * ) dst . dst , dst . size , dst . off , fmt , args ); 99 } 100 101 49 int c_dwprintv ( wprint_dst_t dst , const wchar_t * fmt , va_list args ) 102 { 103 2/2 \u2713 Branch 0 taken 2 times. \u2713 Branch 1 taken 47 times. 49 if ( dst . cb == NULL ) { 104 2 return 0 ; 105 } 106 107 47 return dst . cb ( dst , fmt , args ); 108 } 109 110 \u2717 int c_dwprintf ( wprint_dst_t dst , const wchar_t * fmt , ...) 111 { 112 va_list args ; 113 \u2717 va_start ( args , fmt ); 114 \u2717 int ret = c_dwprintv ( dst , fmt , args ); 115 \u2717 va_end ( args ); 116 \u2717 return ret ; 117 } 118 ./ File: deps/cbase/src/print.c Date: 2024-12-13 21:47:27 Lines: 15/43 34.9% Functions: 4/9 44.4% Branches: 3/18 16.7% List of functions Function (Line) Call count Block coverage c_dprintf (line 92) not called 0.0% c_dprintv (line 83) called 1481 times 100.0% c_print_init (line 8) called 1 time 100.0% c_printf (line 26) not called 0.0% c_printv (line 13) called 1404 times 83.0% c_printv_cb (line 72) called 1404 times 100.0% c_sprintf (line 63) not called 0.0% c_sprintv (line 35) not called 0.0% c_sprintv_cb (line 78) not called 0.0% Line Branch Exec Source 1 #include \"print.h\" 2 3 #include \"platform.h\" 4 5 #include <locale.h> 6 #include <stdio.h> 7 8 1 void c_print_init () 9 { 10 1 setlocale ( LC_ALL , \"en_US.UTF-8\" ); 11 1 } 12 13 1404 int c_printv ( const char * fmt , va_list args ) 14 { 15 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 1404 times. 1404 if ( fmt == NULL ) { 16 \u2717 return 0 ; 17 } 18 19 va_list copy ; 20 1404 va_copy ( copy , args ); 21 1404 int ret = vprintf ( fmt , copy ); 22 1404 va_end ( copy ); 23 1404 return ret ; 24 } 25 26 \u2717 int c_printf ( const char * fmt , ...) 27 { 28 va_list args ; 29 \u2717 va_start ( args , fmt ); 30 \u2717 int ret = c_printv ( fmt , args ); 31 \u2717 va_end ( args ); 32 \u2717 return ret ; 33 } 34 35 \u2717 int c_sprintv ( char * buf , size_t size , int off , const char * fmt , va_list args ) 36 { 37 \u2717 if (( buf == NULL && size > 0 ) || off * sizeof ( char ) > size || fmt == NULL ) { 38 \u2717 return 0 ; 39 } 40 41 \u2717 buf = buf == NULL ? buf : & buf [ off ]; 42 43 va_list copy ; 44 \u2717 va_copy ( copy , args ); 45 int ret ; 46 #if defined(C_WIN) 47 if ( buf == NULL && size == 0 ) { 48 ret = vsnprintf ( buf , size / sizeof ( char ) - off , fmt , copy ); 49 } else { 50 ret = vsnprintf_s ( buf , size / sizeof ( char ) - off , size / sizeof ( char ) - off , fmt , copy ); 51 } 52 va_end ( copy ); 53 #else 54 \u2717 ret = vsnprintf ( buf , size / sizeof ( char ) - off , fmt , copy ); 55 \u2717 va_end ( copy ); 56 \u2717 if ( size > 0 && ( size_t ) ret > size - off ) { 57 \u2717 return 0 ; 58 } 59 #endif 60 \u2717 return ret ; 61 } 62 63 \u2717 int c_sprintf ( char * buf , size_t size , int off , const char * fmt , ...) 64 { 65 va_list args ; 66 \u2717 va_start ( args , fmt ); 67 \u2717 int ret = c_sprintv ( buf , size , off , fmt , args ); 68 \u2717 va_end ( args ); 69 \u2717 return ret ; 70 } 71 72 1404 int c_printv_cb ( print_dst_t dst , const char * fmt , va_list args ) 73 { 74 ( void ) dst ; 75 1404 return c_printv ( fmt , args ); 76 } 77 78 \u2717 int c_sprintv_cb ( print_dst_t dst , const char * fmt , va_list args ) 79 { 80 \u2717 return c_sprintv (( char * ) dst . dst , dst . size , dst . off , fmt , args ); 81 } 82 83 1481 int c_dprintv ( print_dst_t dst , const char * fmt , va_list args ) 84 { 85 2/2 \u2713 Branch 0 taken 77 times. \u2713 Branch 1 taken 1404 times. 1481 if ( dst . cb == NULL ) { 86 77 return 0 ; 87 } 88 89 1404 return dst . cb ( dst , fmt , args ); 90 } 91 92 \u2717 int c_dprintf ( print_dst_t dst , const char * fmt , ...) 93 { 94 va_list args ; 95 \u2717 va_start ( args , fmt ); 96 \u2717 int ret = c_dprintv ( dst , fmt , args ); 97 \u2717 va_end ( args ); 98 \u2717 return ret ; 99 } 100 ./ File: test/main.c Date: 2024-12-13 21:47:27 Lines: 260/260 100.0% Functions: 18/18 100.0% Branches: 67/134 50.0% List of functions Function (Line) Call count Block coverage empty_test (line 274) called 2 times 100.0% main (line 453) called 1 time 100.0% setup (line 324) called 1 time 100.0% teardown (line 330) called 1 time 100.0% test_ctest (line 435) called 1 time 77.0% test_fail_test (line 68) called 1 time 100.0% test_param_test (line 251) called 1 time 67.0% test_subsubtest (line 258) called 1 time 100.0% test_subtest (line 264) called 1 time 79.0% test_success_test (line 31) called 1 time 56.0% test_t_end (line 289) called 1 time 81.0% test_t_expect (line 356) called 1 time 100.0% test_t_finish (line 410) called 1 time 100.0% test_t_run (line 279) called 1 time 54.0% test_t_send (line 393) called 1 time 100.0% test_t_set_print (line 375) called 1 time 100.0% test_t_set_priv (line 309) called 1 time 75.0% test_t_setup_teardown (line 336) called 1 time 100.0% Line Branch Exec Source 1 #include \"mem_stats.h\" 2 #include \"test.h\" 3 #include \"type.h\" 4 5 #include <memory.h> 6 #include <stdio.h> 7 #include <stdlib.h> 8 #include <string.h> 9 10 typedef struct tdata_s { 11 void * priv ; 12 setup_fn setup ; 13 setup_fn teardown ; 14 print_dst_t print ; 15 wprint_dst_t wprint ; 16 long long passed ; 17 long long failed ; 18 int depth ; 19 char * buf ; 20 size_t buf_size ; 21 size_t buf_len ; 22 const char * exp ; 23 size_t exp_len ; 24 size_t mem ; 25 mem_stats_t mem_stats ; 26 } tdata_t ; 27 28 extern tdata_t t_get_data (); 29 extern void t_set_data ( tdata_t data ); 30 31 1 TEST ( success_test ) 32 { 33 1 START ; 34 35 struct { 36 unsigned char b : 1 ; 37 1 } t = { 0 }; 38 39 1 unsigned int u = 0 ; 40 41 EXPECT_EQ ( 1 , 1 ); 42 EXPECT_NE ( 1 , 2 ); 43 EXPECT_GT ( 2 , 1 ); 44 EXPECT_GE ( 2 , 1 ); 45 EXPECT_GE ( 2 , 2 ); 46 EXPECT_LT ( 1 , 2 ); 47 EXPECT_LE ( 1 , 2 ); 48 EXPECT_LE ( 2 , 2 ); 49 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 1 times. 1 EXPECT_EQB ( t . b , 0 ); 50 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 1 times. 1 EXPECT_NEB ( t . b , 1 ); 51 EXPECT_EQM ( 0x3 , 0xa , 0x2 ); 52 EXPECT_NEM ( 0x3 , 0xa , 0xb ); 53 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_FMT ( \"123\" , 1 , \"%3u\" , & u ); 54 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_STR ( NULL , NULL ); 55 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_STR ( \"a\" , \"a\" ); 56 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_STRN ( NULL , NULL , 1 ); 57 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_STRN ( \"ab\" , \"ac\" , 1 ); 58 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_WSTR ( NULL , NULL ); 59 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_WSTR ( L \"a\" , L \"a\" ); 60 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_WSTRN ( NULL , NULL , 1 ); 61 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_WSTRN ( L \"ab\" , L \"ac\" , 1 ); 62 EXPECT ( ! strcmp ( \"a\" , \"a\" )); 63 1 char exp [] = \" \\t Test \\n\\t Test\" ; 64 1/2 \u2717 Branch 3 not taken. \u2713 Branch 4 taken 1 times. 1 EXPECT_FSTR ( t_fprintf ( NULL , \" \\t Test \\n\\t Test\" ), exp , sizeof ( exp ) - 1 ); 65 1 END ; 66 } 67 68 1 TEST ( fail_test ) 69 { 70 1 START ; 71 72 struct { 73 unsigned char b : 1 ; 74 1 } t = { 0 }; 75 76 1 unsigned int u = 0 ; 77 78 1/2 \u2713 Branch 0 taken 1 times. \u2717 Branch 1 not taken. 1 EXPECT_EQB ( t . b , 1 ); 79 1 EXPECT_EQ (( char ) 0 , 1 ); 80 1 EXPECT_EQ (( short ) 0 , 1 ); 81 1 EXPECT_EQ (( int ) 0 , 1 ); 82 1 EXPECT_EQ (( long ) 0 , 1 ); 83 1 EXPECT_EQ (( long long ) 0 , 1 ); 84 85 1/2 \u2713 Branch 0 taken 1 times. \u2717 Branch 1 not taken. 1 EXPECT_NEB ( t . b , 0 ); 86 1 EXPECT_EQ ( 1 , 2 ); 87 1 EXPECT_NE ( 1 , 1 ); 88 1 EXPECT_GT ( 1 , 2 ); 89 1 EXPECT_GT ( 2 , 2 ); 90 1 EXPECT_GE ( 1 , 2 ); 91 1 EXPECT_LT ( 2 , 1 ); 92 1 EXPECT_LT ( 2 , 1 ); 93 1 EXPECT_LE ( 2 , 1 ); 94 1 EXPECT_EQM ( 0x3 , 0xa , 0xe ); 95 EXPECT_NEM ( 0x3 , 0xa , 0xb ); 96 97 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_FMT ( \"123\" , 2 , \"%3u\" , & u ); 98 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_FMT ( \"aaa\" , 1 , \"%3u\" , & u ); 99 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_FMT ( \"aaaa\" , 1 , \"%3u\" , & u ); 100 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_FMT ( \"aaaaaaaaa\" , 1 , \"%3u\" , & u ); 101 102 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STR ( \"\" , NULL ); 103 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STR ( \"a\" , \"b\" ); 104 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STRN ( \"ab\" , NULL , 1 ); 105 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STRN ( \"ab\" , \"bc\" , 1 ); 106 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTR ( L \"\" , NULL ); 107 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTR ( L \"a\" , L \"b\" ); 108 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTRN ( L \"ab\" , NULL , 1 ); 109 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTRN ( L \"ab\" , L \"bc\" , 1 ); 110 111 1 EXPECT_FAIL ( \"%s\" , \"\" ); 112 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_EQB-----------------------------------\" ); 113 114 1 EXPECT_EQB ( 0 , 1 ); 115 1 EXPECT_EQB ( 1 , 0 ); 116 117 1 EXPECT_FAIL ( \"%s\" , \"\" ); 118 1 EXPECT_FAIL ( \"%s\" , \"------------------------------------EXPECT_EQ-----------------------------------\" ); 119 120 1 EXPECT_EQ ( U8_MIN , U8_MAX ); 121 1 EXPECT_EQ ( U8_MIN , U16_MAX ); 122 1 EXPECT_EQ ( U8_MIN , U32_MAX ); 123 1 EXPECT_EQ ( U8_MIN , U64_MAX ); 124 1 EXPECT_EQ ( U8_MAX , U8_MIN ); 125 1 EXPECT_EQ ( U16_MIN , U8_MAX ); 126 1 EXPECT_EQ ( U16_MIN , U16_MAX ); 127 1 EXPECT_EQ ( U16_MIN , U32_MAX ); 128 1 EXPECT_EQ ( U16_MIN , U64_MAX ); 129 1 EXPECT_EQ ( U16_MAX , U16_MIN ); 130 131 1 EXPECT_EQ ( U32_MIN , U8_MAX ); 132 1 EXPECT_EQ ( U32_MIN , U16_MAX ); 133 1 EXPECT_EQ ( U32_MIN , U32_MAX ); 134 1 EXPECT_EQ ( U32_MIN , U64_MAX ); 135 1 EXPECT_EQ ( U32_MAX , U32_MIN ); 136 137 1 EXPECT_EQ ( U64_MIN , U8_MAX ); 138 1 EXPECT_EQ ( U64_MIN , U16_MAX ); 139 1 EXPECT_EQ ( U64_MIN , U32_MAX ); 140 1 EXPECT_EQ ( U64_MIN , U64_MAX ); 141 1 EXPECT_EQ ( U64_MAX , U64_MIN ); 142 143 1 EXPECT_FAIL ( \"%s\" , \"\" ); 144 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_EQM-----------------------------------\" ); 145 146 1 EXPECT_EQM ( U8_MIN , U8_MAX , 1 ); 147 1 EXPECT_EQM ( U8_MAX , U8_MIN , 1 ); 148 1 EXPECT_EQM ( U16_MIN , U16_MAX , 1 ); 149 1 EXPECT_EQM ( U16_MAX , U16_MIN , 1 ); 150 1 EXPECT_EQM ( U32_MIN , U32_MAX , 1 ); 151 1 EXPECT_EQM ( U32_MAX , U32_MIN , 1 ); 152 1 EXPECT_EQM ( U64_MIN , U64_MAX , 1 ); 153 1 EXPECT_EQM ( U64_MAX , U64_MIN , 1 ); 154 155 1 EXPECT_FAIL ( \"%s\" , \"\" ); 156 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_FMT-----------------------------------\" ); 157 158 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_FMT ( \" \\t aaaaaaa\" , 1 , \" \\t a\" , & u ); 159 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_FMT ( \" \\t a\" , 1 , \" \\t aaaaaaa\" , & u ); 160 161 1 EXPECT_FAIL ( \"%s\" , \"\" ); 162 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_STR-----------------------------------\" ); 163 164 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STR ( \"aaaaaaa\" , \"a\" ); 165 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STR ( \"a\" , \"aaaaaaa\" ); 166 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STR ( \"a \\n \" , \"b \\n \" ); 167 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STR ( \" \\n\\r\\t a\" , \" \\n\\r\\t b\" ); 168 169 1 EXPECT_FAIL ( \"%s\" , \"\" ); 170 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_STRN----------------------------------\" ); 171 172 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STRN ( \"aaaaaaa\" , \"a\" , 7 ); 173 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STRN ( \"a\" , \"aaaaaaa\" , 7 ); 174 175 1 EXPECT_FAIL ( \"%s\" , \"\" ); 176 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_WSTR-----------------------------------\" ); 177 178 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTR ( L \"aaaaaaa\" , L \"a\" ); 179 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTR ( L \"a\" , L \"aaaaaaa\" ); 180 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTR ( L \"a \\n \" , L \"b \\n \" ); 181 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTR ( L \" \\n\\r\\t a\" , L \" \\n\\r\\t b\" ); 182 183 1 EXPECT_FAIL ( \"%s\" , \"\" ); 184 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_WSTRN----------------------------------\" ); 185 186 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTRN ( L \"aaaaaaa\" , L \"a\" , 7 ); 187 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTRN ( L \"a\" , L \"aaaaaaa\" , 7 ); 188 189 1 EXPECT_FAIL ( \"%s\" , \"\" ); 190 1 EXPECT_FAIL ( \"%s\" , \"-------------------------------------EXPECT-------------------------------------\" ); 191 192 1 EXPECT ( 0 ); 193 194 1 EXPECT_FAIL ( \"%s\" , \"\" ); 195 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_FAIL----------------------------------\" ); 196 197 1 EXPECT_FAIL ( \"%s\" , \"Fail\" ); 198 1 EXPECT_FAIL ( \"Fail %d\" , 1 ); 199 200 1 EXPECT_FAIL ( \"%s\" , \"\" ); 201 1 EXPECT_FAIL ( \"%s\" , \"-----------------------------------EXPECT_FSTR----------------------------------\" ); 202 1 EXPECT_FAIL ( \"%s\" , \"---------------------------------Missing actual---------------------------------\" ); 203 { 204 1 char exp [] = \"Test \\r\\n \" ; 205 1/2 \u2713 Branch 3 taken 1 times. \u2717 Branch 4 not taken. 1 EXPECT_FSTR ( t_fprintf ( NULL , \"est \\r\\n \" ), exp , sizeof ( exp ) - 1 ); 206 } 207 1 EXPECT_FAIL ( \"%s\" , \"--------------------------------Missing expected--------------------------------\" ); 208 { 209 1 char exp [] = \"est \\n \" ; 210 1/2 \u2713 Branch 3 taken 1 times. \u2717 Branch 4 not taken. 1 EXPECT_FSTR ( t_fprintf ( NULL , \"Test \\n \" ), exp , sizeof ( exp ) - 1 ); 211 } 212 1 EXPECT_FAIL ( \"%s\" , \"------------------------------------Different-----------------------------------\" ); 213 { 214 1 char exp [] = \"Test \\n \" ; 215 1/2 \u2713 Branch 3 taken 1 times. \u2717 Branch 4 not taken. 1 EXPECT_FSTR ( t_fprintf ( NULL , \"Tost \\n \" ), exp , sizeof ( exp ) - 1 ); 216 } 217 1 EXPECT_FAIL ( \"%s\" , \"------------------------------Missing \\\\ n expected------------------------------\" ); 218 { 219 1 char exp [] = \"Test\" ; 220 1/2 \u2713 Branch 3 taken 1 times. \u2717 Branch 4 not taken. 1 EXPECT_FSTR ( t_fprintf ( NULL , \"Test \\n \" ), exp , sizeof ( exp ) - 1 ); 221 } 222 1 EXPECT_FAIL ( \"%s\" , \"-------------------------------Missing \\\\ n actual-------------------------------\" ); 223 { 224 1 char exp [] = \"Test \\n \" ; 225 1/2 \u2713 Branch 3 taken 1 times. \u2717 Branch 4 not taken. 1 EXPECT_FSTR ( t_fprintf ( NULL , \"Test\" ), exp , sizeof ( exp ) - 1 ); 226 } 227 1 EXPECT_FAIL ( \"%s\" , \"----------------------------Different in second line----------------------------\" ); 228 { 229 1 char exp [] = \" \\t Test \\n\\t Test\" ; 230 1/2 \u2713 Branch 3 taken 1 times. \u2717 Branch 4 not taken. 1 EXPECT_FSTR ( t_fprintf ( NULL , \" \\t Test \\n\\t Gest\" ), exp , sizeof ( exp ) - 1 ); 231 } 232 1 EXPECT_FAIL ( \"%s\" , \"---------------------------------------Long-------------------------------------\" ); 233 { 234 1 char exp [] = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \\n \" 235 \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\n \" 236 \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \\n \" 237 \"Duis aute irure dolor in rep\" ; 238 1/2 \u2713 Branch 3 taken 1 times. \u2717 Branch 4 not taken. 1 EXPECT_FSTR ( t_fprintf ( NULL , 239 \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \\n \" 240 \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\n \" 241 \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo \" 242 \"consequat. \\n \" 243 \"Duis aute irure dolor in res\" ), 244 exp , 245 sizeof ( exp ) - 1 ); 246 } 247 1 _passed = 1 ; 248 1 END ; 249 } 250 251 1 TESTP ( param_test , int x ) 252 { 253 1 START ; 254 1/2 \u2717 Branch 0 not taken. \u2713 Branch 1 taken 1 times. 1 EXPECT_EQ ( x , 1 ); 255 1 END ; 256 } 257 258 1 TEST ( subsubtest ) 259 { 260 1 SSTART ; 261 1 SEND ; 262 } 263 264 1 TEST ( subtest ) 265 { 266 1 SSTART ; 267 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( success_test ); 268 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( fail_test ); 269 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( subsubtest ); 270 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUNP ( param_test , 1 ); 271 1 SEND ; 272 } 273 274 2 int empty_test () 275 { 276 2 return 1 ; 277 } 278 279 1 TEST ( t_run ) 280 { 281 1 START ; 282 283 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_EQ ( t_run ( empty_test , 0 ), 1 ); 284 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_EQ ( t_run ( empty_test , 1 ), 1 ); 285 286 1 END ; 287 } 288 289 1 TEST ( t_end ) 290 { 291 1 START ; 292 293 1 tdata_t tdata = t_get_data (); 294 295 1 t_set_print ( PRINT_DST_NONE ()); 296 1 t_set_wprint ( PRINT_DST_WNONE ()); 297 298 1 t_start (); 299 300 1 mem_stats_alloc ( 1 ); 301 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_EQ ( t_end ( 1 , \"\" ), 1 ); 302 1 mem_stats_free ( 1 ); 303 304 1 t_set_data ( tdata ); 305 306 1 END ; 307 } 308 309 1 TEST ( t_set_priv ) 310 { 311 1 START ; 312 313 1 tdata_t tdata = t_get_data (); 314 315 1 int a = 0 ; 316 1 t_set_priv ( & a ); 317 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 EXPECT_EQ ( t_get_priv (), & a ); 318 319 1 t_set_data ( tdata ); 320 321 1 END ; 322 } 323 324 1 static int setup ( void * priv ) 325 { 326 ( void ) priv ; 327 1 return 0 ; 328 } 329 330 1 static int teardown ( void * priv ) 331 { 332 ( void ) priv ; 333 1 return 0 ; 334 } 335 336 1 TEST ( t_setup_teardown ) 337 { 338 1 START ; 339 340 1 tdata_t tdata = t_get_data (); 341 342 1 t_set_print ( PRINT_DST_NONE ()); 343 1 t_set_wprint ( PRINT_DST_WNONE ()); 344 345 1 t_setup ( setup ); 346 1 t_teardown ( teardown ); 347 348 1 t_start (); 349 1 t_end ( 0 , \"\" ); 350 351 1 t_set_data ( tdata ); 352 353 1 END ; 354 } 355 356 1 TEST ( t_expect ) 357 { 358 1 START ; 359 360 1 tdata_t tdata = t_get_data (); 361 362 1 t_set_print ( PRINT_DST_NONE ()); 363 1 t_set_wprint ( PRINT_DST_WNONE ()); 364 365 1 t_expect_g ( 1 , __FILE__ , __func__ , __LINE__ , \"\" , 2 , \"\" , 0 , \"==\" ); 366 1 t_expect_g ( 1 , __FILE__ , __func__ , __LINE__ , \"\" , 4 , \"\" , 3 , \"==\" ); 367 1 t_expect_g ( 1 , __FILE__ , __func__ , __LINE__ , \"\" , 8 , \"\" , 7 , \"==\" ); 368 1 t_expect_g ( 1 , __FILE__ , __func__ , __LINE__ , \"\" , 7 , \"\" , 7 , \"==\" ); 369 370 1 t_set_data ( tdata ); 371 372 1 END ; 373 } 374 375 1 TEST ( t_set_print ) 376 { 377 1 START ; 378 379 1 tdata_t tdata = t_get_data (); 380 381 1 t_set_print ( PRINT_DST_NONE ()); 382 1 t_set_wprint ( PRINT_DST_WNONE ()); 383 384 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_STR ( \"a\" , \"b\" ); 385 1/2 \u2713 Branch 1 taken 1 times. \u2717 Branch 2 not taken. 1 EXPECT_WSTR ( L \"a\" , L \"b\" ); 386 387 1 t_set_data ( tdata ); 388 1 _passed = 1 ; 389 390 1 END ; 391 } 392 393 1 TEST ( t_send ) 394 { 395 1 START ; 396 397 1 tdata_t tdata = t_get_data (); 398 399 1 t_set_print ( PRINT_DST_NONE ()); 400 1 t_set_wprint ( PRINT_DST_WNONE ()); 401 402 1 t_send ( 0 , 0 ); 403 1 t_send ( 0 , 1 ); 404 405 1 t_set_data ( tdata ); 406 407 1 END ; 408 } 409 410 1 TEST ( t_finish ) 411 { 412 1 START ; 413 414 1 tdata_t tdata = t_get_data (); 415 1 tdata_t tmp = tdata ; 416 417 1 tmp . print = PRINT_DST_NONE (); 418 1 tmp . wprint = PRINT_DST_WNONE (); 419 420 1 tmp . failed = 1 ; 421 1 tmp . buf = malloc ( tmp . buf_size ); 422 1 t_set_data ( tmp ); 423 1 t_finish (); 424 425 1 tmp . failed = 0 ; 426 1 tmp . buf = malloc ( tmp . buf_size ); 427 1 t_set_data ( tmp ); 428 1 t_finish (); 429 430 1 t_set_data ( tdata ); 431 432 1 END ; 433 } 434 435 1 TEST ( ctest ) 436 { 437 1 SSTART ; 438 439 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( subtest ); 440 441 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_run ); 442 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_end ); 443 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_set_priv ); 444 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_setup_teardown ); 445 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_expect ); 446 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_set_print ); 447 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_send ); 448 1/2 \u2717 Branch 1 not taken. \u2713 Branch 2 taken 1 times. 1 RUN ( t_finish ); 449 450 1 SEND ; 451 } 452 453 1 int main () 454 { 455 1 c_print_init (); 456 1 t_init (); 457 1 t_run ( test_ctest , 1 ); 458 1 return t_finish (); 459 } 460 document.body.classList.add(\"js-enabled\") document.body.classList.remove(\"js-disabled\") var global_summary = document.getElementById(\"summary\") var global_content = document.getElementById(\"/\") var function_list = document.getElementById(\"functions.html\") // Move the summaries in the tree summaries = document.body.querySelectorAll(\".summary\") for (var i = 0; i < summaries.length; i++) { if (summaries[i].id != summary) { global_summary.parentNode.insertBefore(summaries[i], global_summary) } } // Remove the details element of the function list function_list_details = function_list.querySelector(\"details\") function_list_details.parentNode.insertBefore(function_list.querySelector(\"nav\"), function_list_details) function_list_details.parentNode.removeChild(function_list_details) var old_hash = null var enabled_elements = [global_summary, global_content] function activateElement() { if (old_hash != location.hash) { old_hash = location.hash hash_parts = (location.hash == \"\") ? [\"/\"] : decodeURIComponent(location.hash.substring(1)).split(\"|\") for (var i = 0; i < enabled_elements.length; i++) { enabled_elements[i].classList.add(\"js-enabled-hidden\") } enabled_elements = [] element = document.getElementById(hash_parts[0]) if (element == null) { enabled_elements.push(global_summary) enabled_elements.push(global_content) } else { enabled_elements.push(element) var summary = document.getElementById(\"summary-\" + hash_parts[0]) if (summary == null) { enabled_elements.push(global_summary) } else { enabled_elements.push(summary) } } for (var i = 0; i < enabled_elements.length; i++) { enabled_elements[i].classList.remove(\"js-enabled-hidden\") } window.scrollTo(0, 0) // We need to scroll to the element if (hash_parts.length > 1) { document.getElementById(hash_parts[0]).scrollIntoView() } } } activateElement() window.addEventListener(\"hashchange\", activateElement) Generated by: GCOVR (Version 8.2)","title":"Coverage"}]}